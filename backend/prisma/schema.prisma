// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Product {
    id           String        @id @default(uuid())
    name         String
    description  String
    brand        String
    price        Float
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    deletedAt    DateTime?
    SalesProduct SaleProduct[]
}

model Customer {
    id        String    @id @default(uuid())
    name      String
    cpfOrCnpj String    @unique
    email     String    @unique
    phone     String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    Sales     Sale[]
}

model Supplier {
    id        String     @id @default(uuid())
    name      String
    email     String     @unique
    phone     String
    cnpj      String     @unique
    address   String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    deletedAt DateTime?
    Purchases Purchase[]
}

model Sale {
    id           String        @id @default(uuid())
    name         String
    description  String
    customerId   String
    saleDate     DateTime      @default(now())
    customer     Customer      @relation(fields: [customerId], references: [id])
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    deletedAt    DateTime?
    saleProducts SaleProduct[]
}

model SaleProduct {
    id                   String                @id @default(uuid())
    saleId               String
    productId            String
    quantity             Int                   @default(1)
    sale                 Sale                  @relation(fields: [saleId], references: [id])
    product              Product               @relation(fields: [productId], references: [id])
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    deletedAt            DateTime?
    PurchaseSaleProducts PurchaseSaleProduct[]
}

model Purchase {
    id                   String                @id @default(uuid())
    name                 String
    description          String
    supplier             Supplier              @relation(fields: [supplierId], references: [id])
    supplierId           String
    PurchaseSaleProducts PurchaseSaleProduct[]
    createdAt            DateTime              @default(now())
    updatedAt            DateTime              @updatedAt
    deletedAt            DateTime?
}

model PurchaseSaleProduct {
    id            String      @id @default(uuid())
    saleProduct   SaleProduct @relation(fields: [saleProductId], references: [id])
    saleProductId String
    purchase      Purchase    @relation(fields: [purchaseId], references: [id])
    purchaseId    String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    deletedAt     DateTime?
}
